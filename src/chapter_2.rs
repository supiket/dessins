use nannou::geom::{pt2, Point2};

pub const HORSE: &[f32] = &[
    1000.0, 10.0, 10.0, 8.0, 12.0, 9.0, 16.0, 12.0, 17.0, 13.0, 18.0, 14.0, 20.0, 1000.0, 13.0,
    18.0, 12.0, 19.0, 9.0, 21.0, 9.0, 20.0, 10.0, 19.0, 9.0, 17.0, 7.0, 20.0, 8.0, 22.0, 12.0,
    22.0, 1000.0, 12.0, 20.0, 12.0, 22.0, 13.0, 26.0, 16.0, 31.0, 18.0, 31.0, 19.0, 32.0, 1000.0,
    16.0, 31.0, 14.0, 31.0, 14.0, 32.0, 1000.0, 14.0, 31.0, 10.0, 30.0, 12.0, 31.0, 10.0, 32.0,
    10.0, 34.0, 11.0, 34.0, 11.0, 33.0, 10.0, 33.0, 1000.0, 12.0, 32.0, 13.0, 31.0, 1000.0, 10.0,
    34.0, 16.0, 36.0, 1000.0, 16.0, 35.0, 16.0, 37.0, 18.0, 35.0, 17.0, 34.0, 1000.0, 17.0, 36.0,
    20.0, 36.0, 22.0, 32.0, 19.0, 26.0, 1000.0, 20.0, 36.0, 22.0, 36.0, 22.0, 34.0, 24.0, 32.0,
    24.0, 30.0, 19.0, 26.0, 18.0, 23.0, 21.0, 22.0, 21.0, 24.0, 30.0, 30.0, 34.0, 31.0, 36.0, 31.0,
    33.0, 26.0, 32.0, 22.0, 28.0, 22.0, 27.0, 20.0, 29.0, 17.0, 30.0, 19.0, 29.0, 20.0, 29.0, 21.0,
    32.0, 19.0, 33.0, 18.0, 32.0, 17.0, 29.0, 16.0, 28.0, 12.0, 30.0, 10.0, 21.0, 4.0, 21.0, 2.0,
    18.0, 3.0, 19.0, 6.0, 24.0, 10.0, 24.0, 12.0, 22.0, 14.0, 22.0, 16.0, 23.0, 17.0, 1000.0, 22.0,
    16.0, 17.0, 16.0, 16.0, 17.0, 17.0, 18.0, 1000.0, 16.0, 17.0, 16.0, 16.0, 10.0, 14.0, 10.0,
    12.0, 12.0, 11.0, 10.0, 10.0, 1000.0, 21.0, 21.0, 22.0, 24.0, 30.0, 30.0, 1000.0, 24.0, 24.0,
    34.0, 28.0, 1000.0, 25.0, 23.0, 33.0, 26.0, 1000.0, 25.0, 21.0, 27.0, 20.0, 1000.0, 23.0, 21.0,
    24.0, 19.0, 1000.0, 27.0, 20.0, 22.0, 19.0, 22.0, 21.0, 1000.0, 22.0, 19.0, 21.0, 20.0, 1000.0,
    13.0, 34.0, 15.0, 35.0, 16.0, 34.0, 16.0, 33.0, 1000.0, 15.0, 35.0, 15.0, 34.0, 16.0, 34.0,
    15.0, 34.0, 15.0, 35.0, 1000.0, 24.0, 12.0, 26.0, 10.0, 19.0, 5.0, 19.0, 3.0, 1000.0, 28.0,
    22.0, 25.0, 22.0, 2000.0,
];

pub const LION: &[f32] = &[
    1000.0, -2.5, 0.0, -2.0, 1.0, -1.0, 2.0, 0.0, 7.0, 1.0, 7.0, 2.0, 8.0, 2.0, 11.0, 3.0, 14.0,
    3.5, 13.5, 2.5, 11.0, 2.5, 9.0, 1000.0, 3.5, 13.5, 4.0, 13.0, 3.0, 11.0, 3.0, 9.0, 3.0, 11.0,
    4.0, 13.0, 5.0, 12.0, 3.5, 11.0, 3.5, 9.0, 3.5, 11.0, 5.0, 12.0, 5.0, 11.0, 4.0, 10.0, 4.0,
    9.0, 8.0, 9.0, 7.0, 11.0, 8.0, 13.0, 10.0, 14.0, 12.0, 13.0, 13.0, 11.0, 12.0, 11.0, 11.0,
    10.0, 12.0, 8.0, 13.0, 7.0, 14.0, 2.0, 15.0, 2.0, 16.0, 1.0, 16.0, 0.0, 12.0, 0.0, 12.0, 2.0,
    11.0, 5.0, 11.5, 6.0, 11.0, 5.0, 9.0, 3.0, 9.0, 2.0, 10.0, 1.0, 10.0, 0.0, 6.0, 0.0, 7.0, 2.0,
    8.0, 6.0, 7.0, 2.0, 6.0, 4.0, 4.0, 5.0, 5.0, 7.0, 4.0, 8.0, 5.0, 7.0, 4.0, 5.0, 2.0, 4.0, 1.0,
    2.0, 2.0, 2.0, 3.0, 1.0, 2.5, 0.0, -2.5, 0.0, 1000.0, 6.0, 4.0, 7.5, 3.5, 1000.0, 12.0, 11.0,
    10.0, 10.5, 9.0, 10.5, 1000.0, 12.5, 12.0, 12.0, 12.0, 11.0, 11.5, 12.0, 12.0, 12.0, 12.5,
    11.5, 12.5, 10.5, 13.0, 10.0, 13.0, 10.0, 13.5, 10.5, 13.5, 10.5, 13.0, 11.5, 12.5, 12.0, 12.5,
    12.0, 13.0, 1000.0, 7.5, 12.0, 8.5, 12.0, 8.5, 11.5, 2000.0,
];

pub const BIRD_FISH: &[f32] = &[
    1000.0, 0.0, 0.0, 2.0, 0.0, 4.0, 1.0, 4.0, 2.0, 3.0, 2.0, 2.0, 3.0, 4.0, 5.0, 4.0, 6.0, 2.0,
    5.0, 2.0, 6.0, -1.0, 5.0, -2.0, 3.0, -1.0, 2.0, -2.0, 2.0, -3.0, 3.0, -4.0, 3.0, -5.0, 2.0,
    -4.0, 2.0, 0.0, 0.0, 1000.0, -5.0, 2.0, -5.0, 1.0, -7.0, -1.0, -6.0, -2.0, -5.0, -2.0, -5.0,
    -3.0, -2.0, -2.0, -2.0, -3.0, 0.0, -2.0, 1.0, -1.0, 2.0, -1.0, 3.0, -2.0, 4.0, -2.0, 3.0, -1.0,
    4.0, 1.0, 1000.0, 2.0, 5.0, 0.0, 4.0, 0.0, 2.0, 1000.0, -2.0, 1.0, -5.0, 1.0, -4.0, -1.0, -3.0,
    0.0, -3.0, -1.0, -4.0, -1.0, -5.0, -2.0, 0.0, -2.0, 1000.0, -7.0, -1.0, -6.0, -1.0, 1000.0,
    -4.0, 2.5, -4.0, 2.8, -4.3, 2.8, -4.3, 2.5, -4.0, 2.5, 1000.0, -5.0, 0.0, -5.5, 0.0, -5.5, 0.5,
    -5.0, 0.5, -5.0, 0.0, 2000.0,
];

pub const SMURF: &[f32] = &[
    1000.0, 12.0, 12.0, 14.0, 8.0, 14.0, 4.0, 12.0, 2.0, 8.0, 2.0, 4.0, 4.0, 0.0, 10.0, 0.0, 20.0,
    4.0, 26.0, 6.0, 28.0, 12.0, 28.0, 14.0, 26.0, 14.0, 22.0, 12.0, 16.0, 12.0, 12.0, 20.0, 14.0,
    24.0, 14.0, 28.0, 12.0, 28.0, 10.0, 26.0, 4.0, 28.0, 0.0, 36.0, 0.0, 38.0, 2.0, 40.0, 10.0,
    40.0, 22.0, 36.0, 26.0, 28.0, 26.0, 26.0, 22.0, 28.0, 14.0, 28.0, 12.0, 28.0, 14.0, 27.0, 18.0,
    18.0, 18.0, 16.0, 20.0, 16.0, 18.0, 20.0, 14.0, 16.0, 18.0, 12.0, 16.0, 1000.0, 16.0, 20.0,
    16.0, 24.0, 20.0, 32.0, 20.0, 34.0, 20.0, 32.0, 12.0, 34.0, 12.0, 32.0, 10.0, 28.0, 1000.0,
    4.0, 26.0, 2.0, 28.0, 4.0, 30.0, 8.0, 30.0, 6.0, 32.0, 6.0, 34.0, 6.0, 32.0, 4.0, 32.0, 2.0,
    30.0, 2.0, 28.0, 1000.0, 8.0, 30.0, 8.0, 36.0, 10.0, 38.0, 1000.0, 4.0, 32.0, 4.0, 34.0, 8.0,
    38.0, 6.0, 40.0, 6.0, 42.0, 8.0, 44.0, 10.0, 44.0, 10.0, 42.0, 12.0, 42.0, 12.0, 38.0, 16.0,
    36.0, 32.0, 36.0, 38.0, 40.0, 40.0, 44.0, 38.0, 42.0, 36.0, 46.0, 30.0, 48.0, 36.0, 48.0, 40.0,
    44.0, 40.0, 56.0, 36.0, 62.0, 32.0, 64.0, 24.0, 64.0, 18.0, 62.0, 16.0, 60.0, 16.0, 58.0, 18.0,
    56.0, 24.0, 56.0, 22.0, 56.0, 20.0, 53.0, 28.0, 56.0, 22.0, 54.0, 28.0, 54.0, 32.0, 52.0, 34.0,
    48.0, 32.0, 52.0, 28.0, 48.0, 30.0, 46.0, 28.0, 44.0, 1000.0, 28.0, 48.0, 22.0, 48.0, 24.0,
    48.0, 24.0, 52.0, 22.0, 54.0, 18.0, 52.0, 18.0, 50.0, 20.0, 48.0, 12.0, 48.0, 16.0, 48.0, 18.0,
    50.0, 16.0, 48.0, 16.0, 50.0, 18.0, 52.0, 16.0, 50.0, 16.0, 48.0, 14.0, 46.0, 16.0, 44.0,
    1000.0, 12.0, 48.0, 10.0, 44.0, 1000.0, 16.0, 46.0, 18.0, 44.0, 1000.0, 18.0, 46.0, 26.0, 46.0,
    24.0, 46.0, 24.0, 44.0, 22.0, 42.0, 20.0, 44.0, 20.0, 46.0, 1000.0, 22.0, 42.0, 22.0, 44.0,
    24.0, 44.0, 1000.0, 28.0, 46.0, 26.0, 44.0, 1000.0, 24.0, 54.0, 25.0, 52.0, 1000.0, 27.0, 52.0,
    28.0, 54.0, 30.0, 52.0, 1000.0, 25.0, 49.0, 26.0, 50.0, 27.0, 49.0, 1000.0, 36.0, 38.0, 40.0,
    38.0, 42.0, 40.0, 48.0, 40.0, 48.0, 42.0, 50.0, 42.0, 52.0, 40.0, 50.0, 36.0, 48.0, 36.0, 48.0,
    38.0, 48.0, 38.0, 48.0, 36.0, 46.0, 34.0, 48.0, 36.0, 48.0, 26.0, 46.0, 24.0, 46.0, 32.0, 46.0,
    30.0, 42.0, 30.0, 44.0, 28.0, 44.0, 26.0, 42.0, 24.0, 40.0, 26.0, 40.0, 32.0, 42.0, 32.0, 28.0,
    32.0, 30.0, 32.0, 32.0, 26.0, 1000.0, 44.0, 26.0, 44.0, 24.0, 46.0, 24.0, 1000.0, 42.0, 38.0,
    44.0, 36.0, 44.0, 32.0, 2000.0,
];

pub struct DessinShape {
    pub points: Vec<f32>,
    pub points_index: usize,
    pub line_index: usize,
}

pub enum Action {
    Continue(Point2, bool),
    Break,
}

impl DessinShape {
    pub fn new(points: &[f32]) -> Self {
        Self {
            points: points.to_vec(),
            points_index: 0,
            line_index: 0,
        }
    }

    pub fn calculate_point(&mut self) -> Action {
        let mut newline = false;

        let mut a = self.points[self.points_index];
        self.points_index += 1;
        if a == 2000.0 {
            return Action::Break;
        }
        if a == 1000.0 {
            a = self.points[self.points_index];
            self.points_index += 1;
            self.line_index += 1;
            newline = true;
        }
        let b = self.points[self.points_index];
        let point = pt2(a, b);
        self.points_index += 1;

        Action::Continue(point, newline)
    }
}
